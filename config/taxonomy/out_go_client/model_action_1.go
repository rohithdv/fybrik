/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Action1 - Contains one of two action types 
type Action1 struct {
	ActionOnColumns *ActionOnColumns
	ActionOnDatasets *ActionOnDatasets
}

// ActionOnColumnsAsAction1 is a convenience function that returns ActionOnColumns wrapped in Action1
func ActionOnColumnsAsAction1(v *ActionOnColumns) Action1 {
	return Action1{ ActionOnColumns: v}
}

// ActionOnDatasetsAsAction1 is a convenience function that returns ActionOnDatasets wrapped in Action1
func ActionOnDatasetsAsAction1(v *ActionOnDatasets) Action1 {
	return Action1{ ActionOnDatasets: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Action1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActionOnColumns
	err = json.Unmarshal(data, &dst.ActionOnColumns)
	if err == nil {
		jsonActionOnColumns, _ := json.Marshal(dst.ActionOnColumns)
		if string(jsonActionOnColumns) == "{}" { // empty struct
			dst.ActionOnColumns = nil
		} else {
			match++
		}
	} else {
		dst.ActionOnColumns = nil
	}

	// try to unmarshal data into ActionOnDatasets
	err = json.Unmarshal(data, &dst.ActionOnDatasets)
	if err == nil {
		jsonActionOnDatasets, _ := json.Marshal(dst.ActionOnDatasets)
		if string(jsonActionOnDatasets) == "{}" { // empty struct
			dst.ActionOnDatasets = nil
		} else {
			match++
		}
	} else {
		dst.ActionOnDatasets = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionOnColumns = nil
		dst.ActionOnDatasets = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Action1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Action1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Action1) MarshalJSON() ([]byte, error) {
	if src.ActionOnColumns != nil {
		return json.Marshal(&src.ActionOnColumns)
	}

	if src.ActionOnDatasets != nil {
		return json.Marshal(&src.ActionOnDatasets)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Action1) GetActualInstance() (interface{}) {
	if obj.ActionOnColumns != nil {
		return obj.ActionOnColumns
	}

	if obj.ActionOnDatasets != nil {
		return obj.ActionOnDatasets
	}

	// all schemas are nil
	return nil
}

type NullableAction1 struct {
	value *Action1
	isSet bool
}

func (v NullableAction1) Get() *Action1 {
	return v.value
}

func (v *NullableAction1) Set(val *Action1) {
	v.value = val
	v.isSet = true
}

func (v NullableAction1) IsSet() bool {
	return v.isSet
}

func (v *NullableAction1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction1(val *Action1) *NullableAction1 {
	return &NullableAction1{value: val, isSet: true}
}

func (v NullableAction1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


