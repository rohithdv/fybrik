/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ActionOnDatasets struct for ActionOnDatasets
type ActionOnDatasets struct {
	Name *AllowableActionDataset `json:"name,omitempty"`
}

// NewActionOnDatasets instantiates a new ActionOnDatasets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionOnDatasets() *ActionOnDatasets {
	this := ActionOnDatasets{}
	return &this
}

// NewActionOnDatasetsWithDefaults instantiates a new ActionOnDatasets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionOnDatasetsWithDefaults() *ActionOnDatasets {
	this := ActionOnDatasets{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActionOnDatasets) GetName() AllowableActionDataset {
	if o == nil || o.Name == nil {
		var ret AllowableActionDataset
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionOnDatasets) GetNameOk() (*AllowableActionDataset, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActionOnDatasets) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given AllowableActionDataset and assigns it to the Name field.
func (o *ActionOnDatasets) SetName(v AllowableActionDataset) {
	o.Name = &v
}

func (o ActionOnDatasets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableActionOnDatasets struct {
	value *ActionOnDatasets
	isSet bool
}

func (v NullableActionOnDatasets) Get() *ActionOnDatasets {
	return v.value
}

func (v *NullableActionOnDatasets) Set(val *ActionOnDatasets) {
	v.value = val
	v.isSet = true
}

func (v NullableActionOnDatasets) IsSet() bool {
	return v.isSet
}

func (v *NullableActionOnDatasets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionOnDatasets(val *ActionOnDatasets) *NullableActionOnDatasets {
	return &NullableActionOnDatasets{value: val, isSet: true}
}

func (v NullableActionOnDatasets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionOnDatasets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


