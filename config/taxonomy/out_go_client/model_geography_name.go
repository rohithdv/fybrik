/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GeographyName Name of the geography
type GeographyName string

// List of geography_name
const (
	NETHERLANDS GeographyName = "Netherlands"
	TURKEY GeographyName = "Turkey"
)

var allowedGeographyNameEnumValues = []GeographyName{
	"Netherlands",
	"Turkey",
}

func (v *GeographyName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeographyName(value)
	for _, existing := range allowedGeographyNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeographyName", value)
}

// NewGeographyNameFromValue returns a pointer to a valid GeographyName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeographyNameFromValue(v string) (*GeographyName, error) {
	ev := GeographyName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeographyName: valid values are %v", v, allowedGeographyNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeographyName) IsValid() bool {
	for _, existing := range allowedGeographyNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to geography_name value
func (v GeographyName) Ptr() *GeographyName {
	return &v
}

type NullableGeographyName struct {
	value *GeographyName
	isSet bool
}

func (v NullableGeographyName) Get() *GeographyName {
	return v.value
}

func (v *NullableGeographyName) Set(val *GeographyName) {
	v.value = val
	v.isSet = true
}

func (v NullableGeographyName) IsSet() bool {
	return v.isSet
}

func (v *NullableGeographyName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeographyName(val *GeographyName) *NullableGeographyName {
	return &NullableGeographyName{value: val, isSet: true}
}

func (v NullableGeographyName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeographyName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

