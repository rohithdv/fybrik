/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v2opa

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/schema"
	openapiclient "github.com/mesh-for-data/mesh-for-data/pkg/connectors/out_go_client"
)

var decoder = schema.NewDecoder()

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"GetPoliciesDecisions",
			strings.ToUpper("Get"),
			"/getPoliciesDecisions",
			c.GetPoliciesDecisions,
		},
	}
}

// GetPoliciesDecisions - getPoliciesDecisions
func (c *DefaultApiController) GetPoliciesDecisions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	fmt.Println("query123456")
	fmt.Println(query)
	fmt.Println("query.Get(\"input\")")
	fmt.Println(query.Get("input"))
	input1 := strings.Split(query.Get("input"), ",")
	fmt.Println("input in DefaultApiController", input1)

	type SimpleData struct {
		input openapiclient.PolicymanagerRequest
	}
	v := &SimpleData{}

	var policyManagerRequest openapiclient.PolicymanagerRequest

	// v:= make(map[string][]string, 0)
	// v["test"] = input1
	err := decoder.Decode(v, query)
	if err != nil {
		fmt.Println("Error in GET parameters : ", err)
	} else {
		fmt.Println("GET parameters : ", policyManagerRequest)
	}

	fmt.Println("v in DefaultApiController", v)
	// fmt.Println("input in DefaultApiController", input1)
	// fmt.Println("policyManagerRequest in DefaultApiController", policyManagerRequest)

	// input := []openapiclient.PolicymanagerRequest{*openapiclient.NewPolicymanagerRequest(*openapiclient.NewAction(openapiclient.ActionType("read")), *openapiclient.NewResource("{\"asset_id\": \"0bb3245e-e3ef-40b7-b639-c471bae4966c\", \"catalog_id\": \"503d683f-1d43-4257-a1a3-0ddf5e446ba5\"}", "http://vault.m4d-system:8200/v1/kubernetes-secrets/wkc-creds?namespace=cp4d"))} // []PolicymanagerRequest | input values that need to be considered for filter

	// result, err := c.service.GetPoliciesDecisions(r.Context(), input)
	// // If an error occurred, encode the error with the status code
	// if err != nil {
	// 	EncodeJSONResponse(err.Error(), &result.Code, w)
	// 	return
	// }
	// // If no error, encode the body and the result code
	// EncodeJSONResponse(result.Body, &result.Code, w)

}
