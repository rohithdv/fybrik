/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"strings"

	// "github.com/gorilla/mux"
	openapiclientmodels "github.com/mesh-for-data/mesh-for-data/pkg/connectors/taxonomy_models_codegen"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"GetPoliciesDecisions",
			strings.ToUpper("Get"),
			"/getPoliciesDecisions",
			c.GetPoliciesDecisions,
		},
	}
}

// formatRequest generates ascii representation of a request
func formatRequest(r *http.Request) string {
	// Create return string
	var request []string
	// Add the request string
	url := fmt.Sprintf("%v %v %v", r.Method, r.URL, r.Proto)
	request = append(request, url)
	// Add the host
	request = append(request, fmt.Sprintf("Host: %v", r.Host))
	// Loop through headers
	for name, headers := range r.Header {
		name = strings.ToLower(name)
		for _, h := range headers {
			request = append(request, fmt.Sprintf("%v: %v", name, h))
		}
	}

	// If this is a POST, add post data
	if r.Method == "POST" {
		r.ParseForm()
		request = append(request, "\n")
		request = append(request, r.Form.Encode())
	}
	// Return the request as a string
	return strings.Join(request, "\n")
}

func constructPolicymanagerRequest(inputString string) *openapiclientmodels.PolicymanagerRequest {
	fmt.Println("inconstructPolicymanagerRequest")
	fmt.Println("inputString")
	fmt.Println(inputString)
	var bird openapiclientmodels.PolicymanagerRequest
	json.Unmarshal([]byte(inputString), &bird)
	fmt.Println("bird: %v", bird)
	//resource := (&bird).GetResource()
	//fmt.Println(fmt.Sprintf("bird creds: %v", (&resource).GetCreds()))

	return &bird
}

// GetPoliciesDecisions - getPoliciesDecisions
func (c *DefaultApiController) GetPoliciesDecisions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	// input := query.Get("input")
	creds := query.Get("creds")

	// query := r.URL.Query()
	// input := strings.Split(query.Get("input"), ",")
	fmt.Println("query77777")
	fmt.Println(query)

	fmt.Println("creds received")
	fmt.Println(creds)

	fmt.Println("HTTP Request Got")
	fmt.Println(formatRequest(r))

	encodedValue := fmt.Sprintf("%v", r.URL)
	fmt.Println("encodedValue")
	fmt.Println(encodedValue)

	decodedValue, err := url.QueryUnescape(encodedValue)
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Println("decodedValue")
	fmt.Println(decodedValue)
	fmt.Println("formatRequest")
	fmt.Println(formatRequest(r))

	input2 := constructPolicymanagerRequest(query.Get("input"))
	//input3 := []openapiclient.PolicymanagerRequest{*input2}

	result, err := c.service.GetPoliciesDecisions(r.Context(), *input2, creds)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
