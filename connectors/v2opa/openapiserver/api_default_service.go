/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"

	opabl "github.com/mesh-for-data/mesh-for-data/connectors/v2opa_revised/lib"
	openapiclient "github.com/mesh-for-data/mesh-for-data/pkg/connectors/out_go_client"
)

func getEnv(key string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		log.Fatalf("Env Variable %v not defined", key)
	}
	log.Printf("Env. variable extracted: %s - %s\n", key, value)
	return value
}

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// GetPoliciesDecisions - getPoliciesDecisions
func (s *DefaultApiService) GetPoliciesDecisions(ctx context.Context, input openapiclient.PolicymanagerRequest, creds string) (ImplResponse, error) {
	// TODO - update GetPoliciesDecisions with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, PolicymanagerResponse{}) or use other options such as http.Ok ...
	//return Response(200, PolicymanagerResponse{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	// input := []openapiclient.PolicymanagerRequest{*openapiclient.NewPolicymanagerRequest(*openapiclient.NewAction(openapiclient.ActionType("read")), *openapiclient.NewResource("{\"asset_id\": \"0bb3245e-e3ef-40b7-b639-c471bae4966c\", \"catalog_id\": \"503d683f-1d43-4257-a1a3-0ddf5e446ba5\"}", "http://vault.m4d-system:8200/v1/kubernetes-secrets/wkc-creds?namespace=cp4d"))} // []PolicymanagerRequest | input values that need to be considered for filter

	// result, err := c.service.GetPoliciesDecisions(r.Context(), input)
	// // If an error occurred, encode the error with the status code
	// if err != nil {
	// 	EncodeJSONResponse(err.Error(), &result.Code, w)
	// 	return
	// }
	// // If no error, encode the body and the result code
	// EncodeJSONResponse(result.Body, &result.Code, w)

	fmt.Println("Reached Server!")
	fmt.Println("input")
	fmt.Println(input)
	// TODO - update GetPoliciesDecisions with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, []PolicymanagerResponse{}) or use other options such as http.Ok ...
	//return Response(200, []PolicymanagerResponse{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	log.Println("Received PolicymanagerRequest")
	log.Println(input)

	//return Response(http.StatusNotImplemented, nil), errors.New("GetPoliciesDecisions method not implemented")
	// return ImplResponse{}, fmt.Errorf("returning before business logic execution for debugging purpose")

	catalogConnectorAddress := getEnv("CATALOG_CONNECTOR_URL")
	policyToBeEvaluated := "dataapi/authz"

	timeOutInSecs := getEnv("CONNECTION_TIMEOUT")
	timeOut, err := strconv.Atoi(timeOutInSecs)

	if err != nil {
		return ImplResponse{}, fmt.Errorf("conversion of timeOutinseconds failed: %v", err)
	}

	opaServerURL := getEnv("OPA_SERVER_URL")
	opaReader := opabl.NewOpaReader(opaServerURL)

	catalogReader := opabl.NewCatalogReader(catalogConnectorAddress, timeOut)
	eval, err := opaReader.GetOPADecisions(&input, creds, catalogReader, policyToBeEvaluated)
	if err != nil {
		log.Println("GetOPADecisions err:", err)
		return ImplResponse{}, err
	}
	jsonOutput, err := json.MarshalIndent(eval, "", "\t")
	if err != nil {
		return ImplResponse{}, fmt.Errorf("error during MarshalIndent of OPA decisions: %v", err)
	}
	log.Println("Received evaluation : " + string(jsonOutput))
	//return eval, err

	var implResp = new(ImplResponse)
	implResp.Body = eval
	implResp.Code = http.StatusOK

	log.Println("implResp evaluation : ", *implResp)

	return *implResp, nil

	// return Response(http.StatusNotImplemented, nil), errors.New("GetPoliciesDecisions method not implemented")
}
