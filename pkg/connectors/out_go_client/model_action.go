/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Action The action being requested on the data (ex: read, write...) and the geography in which it is to take place.
type Action struct {
	ActionType ActionType `json:"action_type"`
	ProcessingLocation *GeographyName `json:"processingLocation,omitempty"`
}

// NewAction instantiates a new Action object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAction(actionType ActionType) *Action {
	this := Action{}
	this.ActionType = actionType
	return &this
}

// NewActionWithDefaults instantiates a new Action object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionWithDefaults() *Action {
	this := Action{}
	return &this
}

// GetActionType returns the ActionType field value
func (o *Action) GetActionType() ActionType {
	if o == nil {
		var ret ActionType
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *Action) GetActionTypeOk() (*ActionType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ActionType, true
}

// SetActionType sets field value
func (o *Action) SetActionType(v ActionType) {
	o.ActionType = v
}

// GetProcessingLocation returns the ProcessingLocation field value if set, zero value otherwise.
func (o *Action) GetProcessingLocation() GeographyName {
	if o == nil || o.ProcessingLocation == nil {
		var ret GeographyName
		return ret
	}
	return *o.ProcessingLocation
}

// GetProcessingLocationOk returns a tuple with the ProcessingLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetProcessingLocationOk() (*GeographyName, bool) {
	if o == nil || o.ProcessingLocation == nil {
		return nil, false
	}
	return o.ProcessingLocation, true
}

// HasProcessingLocation returns a boolean if a field has been set.
func (o *Action) HasProcessingLocation() bool {
	if o != nil && o.ProcessingLocation != nil {
		return true
	}

	return false
}

// SetProcessingLocation gets a reference to the given GeographyName and assigns it to the ProcessingLocation field.
func (o *Action) SetProcessingLocation(v GeographyName) {
	o.ProcessingLocation = &v
}

func (o Action) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action_type"] = o.ActionType
	}
	if o.ProcessingLocation != nil {
		toSerialize["processingLocation"] = o.ProcessingLocation
	}
	return json.Marshal(toSerialize)
}

type NullableAction struct {
	value *Action
	isSet bool
}

func (v NullableAction) Get() *Action {
	return v.value
}

func (v *NullableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NullableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction(val *Action) *NullableAction {
	return &NullableAction{value: val, isSet: true}
}

func (v NullableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


