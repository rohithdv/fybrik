/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Intent The reason for which the data is to be used.
type Intent string

// List of intent
const (
	MARKETING Intent = "Marketing"
	CUSTOMER_SUPPORT Intent = "Customer Support"
	FRAUD_DETECTION Intent = "Fraud Detection"
	CUSTOMER_BEHAVIOR_ANALYSIS Intent = "Customer Behavior Analysis"
)

var allowedIntentEnumValues = []Intent{
	"Marketing",
	"Customer Support",
	"Fraud Detection",
	"Customer Behavior Analysis",
}

func (v *Intent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Intent(value)
	for _, existing := range allowedIntentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Intent", value)
}

// NewIntentFromValue returns a pointer to a valid Intent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntentFromValue(v string) (*Intent, error) {
	ev := Intent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Intent: valid values are %v", v, allowedIntentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Intent) IsValid() bool {
	for _, existing := range allowedIntentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to intent value
func (v Intent) Ptr() *Intent {
	return &v
}

type NullableIntent struct {
	value *Intent
	isSet bool
}

func (v NullableIntent) Get() *Intent {
	return v.value
}

func (v *NullableIntent) Set(val *Intent) {
	v.value = val
	v.isSet = true
}

func (v NullableIntent) IsSet() bool {
	return v.isSet
}

func (v *NullableIntent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntent(val *Intent) *NullableIntent {
	return &NullableIntent{value: val, isSet: true}
}

func (v NullableIntent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

