/*
 * Some Swagger
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AllowableActionColumns the model 'AllowableActionColumns'
type AllowableActionColumns string

// List of allowable_action_columns
const (
	REMOVE_COLUMN AllowableActionColumns = "RemoveColumn"
	REDACT_COLUMN AllowableActionColumns = "RedactColumn"
	ENCRYPT_COLUMN AllowableActionColumns = "EncryptColumn"
	PERIODIC_BLACKOUT AllowableActionColumns = "PeriodicBlackout"
)

var allowedAllowableActionColumnsEnumValues = []AllowableActionColumns{
	"RemoveColumn",
	"RedactColumn",
	"EncryptColumn",
	"PeriodicBlackout",
}

func (v *AllowableActionColumns) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AllowableActionColumns(value)
	for _, existing := range allowedAllowableActionColumnsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AllowableActionColumns", value)
}

// NewAllowableActionColumnsFromValue returns a pointer to a valid AllowableActionColumns
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAllowableActionColumnsFromValue(v string) (*AllowableActionColumns, error) {
	ev := AllowableActionColumns(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AllowableActionColumns: valid values are %v", v, allowedAllowableActionColumnsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AllowableActionColumns) IsValid() bool {
	for _, existing := range allowedAllowableActionColumnsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to allowable_action_columns value
func (v AllowableActionColumns) Ptr() *AllowableActionColumns {
	return &v
}

type NullableAllowableActionColumns struct {
	value *AllowableActionColumns
	isSet bool
}

func (v NullableAllowableActionColumns) Get() *AllowableActionColumns {
	return v.value
}

func (v *NullableAllowableActionColumns) Set(val *AllowableActionColumns) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowableActionColumns) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowableActionColumns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowableActionColumns(val *AllowableActionColumns) *NullableAllowableActionColumns {
	return &NullableAllowableActionColumns{value: val, isSet: true}
}

func (v NullableAllowableActionColumns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowableActionColumns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

